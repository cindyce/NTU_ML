# -*- coding: utf-8 -*-
"""ML2022Spring - HW8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16J23Uqkclro8zvp5Y1EXFtEWOvMA9YXC

# **Homework 8 - Anomaly Detection**

If there are any questions, please contact mlta-2022spring-ta@googlegroups.com

Slide:    [Link]()ã€€Kaggle: [Link](https://www.kaggle.com/c/ml2022spring-hw8)

# Set up the environment

## Package installation
"""

# Training progress bar
#!pip install -q qqdm

"""## Downloading data"""

#!wget https://github.com/MachineLearningHW/HW8_Dataset/releases/download/v1.0.0/data.zip

#!unzip data.zip

"""# Import packages"""

import random
import numpy as np
import torch
from torch import nn
from torch.utils.data import DataLoader, RandomSampler, SequentialSampler, TensorDataset
import torchvision.transforms as transforms
import torch.nn.functional as F
from torch.autograd import Variable
import torchvision.models as models
from torch.optim import Adam, AdamW
from qqdm import qqdm, format_str
import pandas as pd
from torch.utils.data import ConcatDataset
from tqdm.auto import tqdm

from transformers import get_linear_schedule_with_warmup
from torch.optim.lr_scheduler import StepLR
from UNet import UNet

"""# Loading data"""

train = np.load('data/trainingset.npy', allow_pickle=True)
test = np.load('data/testingset.npy', allow_pickle=True)

print(train.shape)
print(test.shape)

"""## Random seed
Set the random seed to a certain value for reproducibility.
"""

def same_seeds(seed):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True

same_seeds(48763)

"""# Autoencoder

# Models & loss
"""
class fcn_autoencoder(nn.Module):
    def __init__(self):
        super(fcn_autoencoder, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(64 * 64 * 3, 128*2),
            nn.ReLU(),
            nn.Linear(128*2, 64),
            nn.ReLU(), 
            nn.Linear(64, 12*2), 
            nn.ReLU(), 
            nn.Linear(12*2, 3*2)
        )
        
        self.decoder = nn.Sequential(
            nn.Linear(3*2, 12*2),
            nn.ReLU(), 
            nn.Linear(12*2, 64),
            nn.ReLU(),
            nn.Linear(64, 128*2),
            nn.ReLU(), 
            nn.Linear(128*2, 64 * 64 * 3), 
            nn.Tanh()
        )
        
    def forward(self, x):
        x = self.encoder(x)
        #print(x.shape) #[batch_size, latent_dim]
        x = self.decoder(x)
        return x

class multi_fcn_autoencoder(nn.Module):
    def __init__(self):
        super(multi_fcn_autoencoder, self).__init__()
        self.encoder1 = nn.Sequential(
            nn.Linear(64 * 64 * 3, 128),
            nn.ReLU(),
            nn.Linear(128, 64),
            nn.ReLU(), 
            nn.Linear(64, 12), 
            nn.ReLU(), 
            nn.Linear(12, 3*2)
        )
        
        self.encoder2 = nn.Sequential(
            nn.Linear(64 * 64 * 3, 128*4),
            nn.ReLU(),
            nn.Linear(128*4, 64*4),
            nn.ReLU(),
            nn.Linear(64*4, 64),
            nn.ReLU(),
            nn.Linear(64, 12*2), 
            nn.ReLU(), 
            nn.Linear(12*2, 3*2)
        )
        
        self.encoder3 = nn.Sequential(
            nn.Linear(64 * 64 * 3, 128*4),
            nn.ReLU(),
            nn.Linear(128*4, 64*2),
            nn.ReLU(), 
            nn.Linear(64*2, 3*2)
        )
        
        self.decoder = nn.Sequential(
            nn.Linear(3*2, 12),
            nn.ReLU(), 
            nn.Linear(12, 64),
            nn.ReLU(),
            nn.Linear(64, 128),
            nn.ReLU(), 
            nn.Linear(128, 64 * 64 * 3), 
            nn.Tanh()
        ) 
        
    def forward(self, x):
        if x.shape[1] == 64*64*3:
            x1 = self.encoder1(x) 
            x2 = self.encoder2(x)
            x3 = self.encoder3(x) #[batch_size, latent_dim]
            x = torch.cat((x1, x2, x3), 0) #[batch_size*3, latent_dim]
            # print(x.shape)
            x = self.decoder(x)
            a, b, c = x.chunk(3, 0)
            output = (a + b + c)/3
        else:
            output = self.decoder(x) 
        
        return output
    
class conv_autoencoder(nn.Module):
    def __init__(self):
        super(conv_autoencoder, self).__init__()
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 64, 4, stride=2, padding=1), #[batch_size,64,32,32]
            nn.BatchNorm2d(64),
            nn.LeakyReLU(0.1),
            nn.Conv2d(64, 128, 4, stride=2, padding=1), #[batch_size,128,16,16]
            nn.BatchNorm2d(128),
            nn.LeakyReLU(0.1),
			nn.Conv2d(128, 512, 4, stride=2, padding=1), #[batch_size,512,8,8]
            nn.BatchNorm2d(512),
            nn.LeakyReLU(0.1),
        )
        self.decoder = nn.Sequential(
			nn.ConvTranspose2d(512, 128, 4, stride=2, padding=1),
            nn.BatchNorm2d(128),
            nn.LeakyReLU(0.1),
			nn.ConvTranspose2d(128, 64, 4, stride=2, padding=1), 
            nn.BatchNorm2d(64),
            nn.LeakyReLU(0.1),
            nn.ConvTranspose2d(64, 3, 4, stride=2, padding=1),
            nn.Tanh(),
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x


class VAE(nn.Module):
    def __init__(self):
        super(VAE, self).__init__()
        
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 12, 4, stride=2, padding=1),            
            nn.ReLU(),
            nn.Conv2d(12, 24, 4, stride=2, padding=1),    
            nn.ReLU(),
            nn.Conv2d(24, 48, 4, stride=2, padding=1),    
            nn.ReLU(),
            nn.Conv2d(48, 96, 4, stride=2, padding=1),    
            nn.ReLU(),
        )
        self.enc_out_1 = nn.Sequential(
            nn.Conv2d(96, 3, 4, stride=2, padding=1),  
            nn.ReLU(),
        )
        self.enc_out_2 = nn.Sequential(
            nn.Conv2d(96, 3, 4, stride=2, padding=1),
            nn.ReLU(),
        )
        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(3, 96, 4, stride=2, padding=1), 
            nn.ReLU(),
            nn.ConvTranspose2d(96, 48, 4, stride=2, padding=1), 
            nn.ReLU(),
			nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1), 
            nn.ReLU(),
			nn.ConvTranspose2d(24, 12, 4, stride=2, padding=1), 
            nn.ReLU(),
            nn.ConvTranspose2d(12, 3, 4, stride=2, padding=1), 
            nn.Tanh(),
        )

    def encode(self, x):
        h1 = self.encoder(x)
        return self.enc_out_1(h1), self.enc_out_2(h1)

    def reparametrize(self, mu, logvar):
        std = logvar.mul(0.5).exp_()
        if torch.cuda.is_available():
            eps = torch.cuda.FloatTensor(std.size()).normal_()
        else:
            eps = torch.FloatTensor(std.size()).normal_()
        eps = Variable(eps)
        return eps.mul(std).add_(mu)

    def decode(self, z):
        h2 = self.decoder(z)
        return h2

    def forward(self, x):
        mu, logvar = self.encode(x)
        z = self.reparametrize(mu, logvar)
        return self.decode(z), mu, logvar


def loss_vae(recon_x, x, mu, logvar, criterion):
    """
    recon_x: generating images
    x: origin images
    mu: latent mean
    logvar: latent log variance
    """
    mse = criterion(recon_x, x)
    KLD_element = mu.pow(2).add_(logvar.exp()).mul_(-1).add_(1).add_(logvar)
    KLD = torch.sum(KLD_element).mul_(-0.5)
    return mse + KLD

    
"""# Dataset module

Module for obtaining and processing data. The transform function here normalizes image's pixels from [0, 255] to [-1.0, 1.0].

"""

class CustomTensorDataset(TensorDataset):
    """TensorDataset with support of transforms.
    """
    def __init__(self, tensors):
        self.tensors = tensors
        if tensors.shape[-1] == 3:
            self.tensors = tensors.permute(0, 3, 1, 2) #[100000, 3, 64, 64]
            
        '''def normalize(x):
            x.to(torch.float32)
            return 2. * x/255. - 1.'''
        
        self.transform = transforms.Compose([
          transforms.Lambda(lambda x: x.to(torch.float32)),
          transforms.Lambda(lambda x: 2. * x/255. - 1.),
          #transforms.Lambda(normalize)
        ])
        
    def __getitem__(self, index):
        x = self.tensors[index]
        
        if self.transform:
            # mapping images to [-1.0, 1.0]
            x = self.transform(x)
        label = 1
            
        return x, label
    
    def __len__(self):
        return len(self.tensors)

    
class noiseDataset(TensorDataset):
    """TensorDataset with support of transforms.
    """
    def __init__(self, train_num):
        self.noise = torch.rand(train_num//2, 3*2)
        
    def __getitem__(self, index):
        x = self.noise[index]
        label = 0
            
        return x, label

    def __len__(self):
        return len(self.noise)


"""# Classify """
class ClassifyModel(nn.Module):
    def __init__(self, input_dim, hiden_dim, output_dim):
        super(ClassifyModel, self).__init__()
        self.linear1 = nn.Linear(input_dim, hiden_dim)
        self.linear2 = nn.Linear(hiden_dim, output_dim)

    def forward(self, x):
        hidden = self.linear1(x)
        activate = torch.relu(hidden)
        output = self.linear2(activate)
        
        return output

"""# Training

## Configuration
"""

# Training hyperparameters
num_epochs = 80 #50
batch_size = 2000
learning_rate = 1e-3

# Build training dataloader
x = torch.from_numpy(train)
train_dataset = CustomTensorDataset(x)
train_sampler = RandomSampler(train_dataset)
train_dataloader = DataLoader(train_dataset, sampler=train_sampler, batch_size=batch_size)

# Model
model_type = 'multi_fcn'   # selecting a model type from {'cnn', 'fcn', 'vae', 'resnet'}
model_classes = {'multi_fcn': multi_fcn_autoencoder(), 'unet': UNet(), 'fcn': fcn_autoencoder(), 'cnn': conv_autoencoder(), 'vae': VAE()}
model = model_classes[model_type].cuda()

# Loss and optimizer
criterion = nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
scheduler = StepLR(optimizer, step_size=len(train_dataloader) * 50, gamma=0.1)
'''num_warmup_steps = 1000
num_train_steps = len(train_dataloader.dataset) * num_epochs / batch_size
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=num_warmup_steps, num_training_steps=num_train_steps)
'''

"""## Training loop"""

best_loss = np.inf
model.train()

qqdm_train = qqdm(range(num_epochs), desc=format_str('bold', 'Description'))
for epoch in qqdm_train:
    tot_loss = list()
    for data in train_dataloader:

        # ===================loading=====================
        img, label = data
        img = img.float().cuda()
        label = label.cuda()
        #img = data.float().cuda()
        if model_type in ['fcn'] or model_type in ['multi_fcn']:
            img = img.view(img.shape[0], -1)

        # ===================forward=====================
        output = model(img)
        if model_type in ['vae']:
            loss = loss_vae(output[0], img, output[1], output[2], criterion)
        else:
            output = output[0]
            loss = criterion(output, img)
        
        tot_loss.append(loss.item())
        # ===================backward====================
        optimizer.zero_grad()
        loss.backward(retain_graph=True)
        optimizer.step()
        scheduler.step()
        
    # ===================save_best====================
    mean_loss = np.mean(tot_loss)
    if mean_loss < best_loss:
        best_loss = mean_loss
        torch.save(model, 'best_model_{}.pt'.format(model_type))
    # ===================log========================
    qqdm_train.set_infos({
        'epoch': f'{epoch + 1:.0f}/{num_epochs:.0f}',
        'loss': f'{mean_loss:.4f}',
    })
    # ===================save_last========================
    torch.save(model, 'last_model_{}.pt'.format(model_type))
 
classify_batch_size = 200
    
# noise
noise_dataset = noiseDataset(100000)

# concat
concat_dataset = ConcatDataset([train_dataset, noise_dataset])
concat_sampler = SequentialSampler(concat_dataset)
#concat_sampler = RandomSampler(concat_dataset)
concat_dataloader = DataLoader(concat_dataset, sampler=concat_sampler, batch_size=classify_batch_size)


# classify
classify = ClassifyModel(64 * 64 * 3, 1000, 2).cuda()
classify_criterion = nn.CrossEntropyLoss()
classify_optimizer = torch.optim.Adam(model.parameters(), lr=0.008, weight_decay=1e-5)


checkpoint_path = f'best_model_{model_type}.pt'
model = torch.load(checkpoint_path)
model.eval()

n_epochs = 100

out = torch.tensor([]).cuda()
for data in train_dataloader:
    img, label = data
    img = img.float().cuda()
    if model_type in ['fcn'] or model_type in ['multi_fcn']:
        img = img.view(img.shape[0], -1)
    output = model(img)
    if model_type in ['vae']:
        output = output[0]
    
    out = torch.cat((out, output), 0)
       
for epoch in range(n_epochs):

    # ---------- Training ----------
    # Make sure the model is in train mode before training.
    classify.train()

    # These are used to record information in training.
    train_loss = []
    train_accs = []

    for data in tqdm(concat_dataloader):
        img, label = data
        img = img.float().cuda()
        label = label.cuda()
        
        if model_type in ['fcn'] or model_type in ['multi_fcn']:
            img = img.view(img.shape[0], -1)

        output = model(img)
        
        '''outputs = torch.cat((output, noise), dim=0)
        labels = torch.cat((torch.ones(output.shape), torch.zeros(noise.shape)), dim=0)
        
        order = torch.randperm(outputs.shape[0])
        outputs = outputs[order]
        labels = labels[order]'''
        
        prob = classify(output)
        classify_loss = classify_criterion(prob, label.cuda())
        
        classify_optimizer.zero_grad()
        classify_loss.backward()
        classify_optimizer.step()
        
        acc = (prob.argmax(dim=-1) == label).float().mean()
        train_accs.append(acc)
        
    train_acc = sum(train_accs) / len(train_accs)
    print(f"[acc = {train_acc:.5f}")

"""# Inference
Model is loaded and generates its anomaly score predictions.

## Initialize
- dataloader
- model
- prediction file
"""

eval_batch_size = 200

# build testing dataloader
data = torch.tensor(test, dtype=torch.float32)
test_dataset = CustomTensorDataset(data)
test_sampler = SequentialSampler(test_dataset)
test_dataloader = DataLoader(test_dataset, sampler=test_sampler, batch_size=eval_batch_size, num_workers=0)
eval_loss = nn.MSELoss(reduction='none')

# load trained model
checkpoint_path = f'best_model_{model_type}.pt'
model = torch.load(checkpoint_path)
model.eval()

# classify
classify.eval()

# prediction file 
out_file = 'prediction.csv'

anomality = list()
with torch.no_grad():
  for i, data in enumerate(test_dataloader):
    img, label = data
    img = img.float().cuda()
    if model_type in ['fcn'] or model_type in ['multi_fcn']:
      img = img.view(img.shape[0], -1)
    output = model(img)
    if model_type in ['vae']:
      output = output[0]
    if model_type in ['fcn'] or model_type in ['multi_fcn']:
        loss = eval_loss(output, img).sum(-1)
    else:
        loss = eval_loss(output, img).sum([1, 2, 3])
    
    prob = classify(output)
    anomality.append(prob)
    #anomality.append(loss)
anomality = torch.cat(anomality, axis=0)
anomality = torch.sqrt(anomality).reshape(len(test), 1).cpu().numpy()

df = pd.DataFrame(anomality, columns=['score'])
df.to_csv(out_file, index_label = 'ID')